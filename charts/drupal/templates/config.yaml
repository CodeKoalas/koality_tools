apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "appname" . }}
  labels:
    app: {{ template "appname" . }}
data:
  VIRTUAL_HOST: "{{ .Values.deployment.virtualHost }}"
  DRUPAL_TRUSTED_HOSTS: "{{ .Values.deployment.virtualHost }}"
  LETSENCRYPT_HOST: "{{ .Values.deployment.letsEncryptHost }}"
  DRUPAL_BASE_URL: "{{ .Values.deployment.drupalBaseUrl }}"
  DRUPAL_HTTPS: "{{ .Values.deployment.drupalHttps }}"
  APACHE_DOCROOT: "{{ .Values.deployment.apacheDocroot }}"
  DB_DATABASE: "{{ .Values.persistence.databaseName }}"
  DB_USERNAME: "{{ .Values.persistence.databaseUser }}"
  SITE_ENV: "{{ .Values.deployment.siteEnv }}"

---
# Need to allow the deployment to define config maps as files that we can mount
# inside the pods.
# The configMapFiles value can look like the below.
# configMapFiles:
#   serverFile:
#     mountPath: /etc/config
#     data: 
#       server-file.json: |-
#         {}
{{- if .Values.deployment.configMapFiles }}
{{- $context := . }}
{{- range $key, $value := .Values.deployment.configMapFiles }}
# Range looses some context, so we create a new dict and pass on the .Release
# and .Values to the template functions.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "appname" $context }}-{{ $key }}
  labels:
    app: {{ template "appname" $context }}
# Now we need to loop over each data value and use the keys as file names
# and the values as the file contents.
data:
  {{- range $dataKey, $dataValue := $value.data }}
  {{ $dataKey }}: |
{{ $dataValue | indent 4 }}
  {{- end }}
{{- end }}
{{- end }}
