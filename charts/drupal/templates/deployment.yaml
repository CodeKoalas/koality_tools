apiVersion: {{ .Values.deployment.apiVersion }}
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    app: {{ template "appname" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.application.tier }}"
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
      labels:
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
{{ include "sharedlabels" . | indent 8 }}
    spec:
      serviceAccountName: {{ template "serviceAccountName" . }}
      containers:
      - name: {{ .Values.deployment.name }}
        image: {{ template "imagename" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 80
{{- if .Values.persistence.enabled }}
        volumeMounts:
{{- range $volume := .Values.persistence.volumes }}
          - name: {{ $volume.name | quote }}
            mountPath: {{ $volume.mount.mountPath | quote }}
            {{- if $volume.mount.subPath }}
            subPath: {{ $volume.mount.subPath | quote }}
            {{- end }}
{{- end }}
{{- end }}
        resources:
          limits:
            cpu: {{ .Values.persistence.limits.cpu }}
            memory: {{ .Values.persistence.limits.memory }}
          requests:
            cpu: {{ .Values.persistence.requests.cpu }}
            memory: {{ .Values.persistence.requests.memory }}
        envFrom:
        - configMapRef:
            name: {{ template "appname" . }}
        {{- if .Values.application.secretName }}
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
        - name: MYSQL_HOST
          valueFrom:
            configMapKeyRef:
              name: mysql-instance-config
              key: "gitlab-managed-apps.mysql-instance-config-host"
        - name: MYSQL_PORT
          valueFrom:
            configMapKeyRef:
              name: mysql-instance-config
              key: "gitlab-managed-apps.mysql-instance-config-port"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "appname" . }}-secrets
              key: MYSQL_PASSWORD
      # This will wait for MySQL to be ready and then check if the DB_NAME database exists and if it doesn't it will create it.
      initContainers:
      # Check for if the DB_DATABASE database exists and if it doesn't, we create it.
      - name: create-db
        image: {{ .Values.deployment.initContainerImage }}
        imagePullPolicy: "Always"
        envFrom:
        - configMapRef:
            name: {{ template "appname" . }}
        env:
        - name: MYSQL_DATABASE
          value: {{ .Values.persistence.databaseName }}
        - name: MYSQL_SERVER
          valueFrom:
            configMapKeyRef:
              name: mysql-instance-config
              key: mysql-instance-config-host
        - name: MYSQL_PORT
          valueFrom:
            configMapKeyRef:
              name: mysql-instance-config
              key: mysql-instance-config-port
        - name: MYSQL_USER
          value: {{ .Values.persistence.databaseUser }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "appname" . }}-db-secret
              key: MYSQL_PASSWORD
{{- if .Values.persistence.enabled }}
{{- $context := . }}
      volumes:
{{- range $volume := .Values.persistence.volumes }}
        - name: {{ $volume.name | quote }}
          persistentVolumeClaim:
            {{ $args := dict "context" $context "name" $volume.name }}
            claimName: {{ template "pvcName" $args }}
{{- end }}
{{- end }}

