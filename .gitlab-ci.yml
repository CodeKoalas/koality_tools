variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - upload

.build-base:
  image: docker:23.0.6
  stage: build
  services:
    - docker:dind
  before_script:
    - until docker info; do sleep 1; done
    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USER" --password-stdin
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

# Need a build that runs on tags and based on the tag name we will build
# the images and then set some environment variables before calling the
# /bin/build.sh script. The tags will look like "laravel-1.2.4" where we
# want to extra anything before the `-1.4.3` and pass that as $DIRECTORY
# and then extract the version as $VERSION and use those.
build docker image:
  extends: .build-base
  script:
    - DIRECTORY=`echo $CI_COMMIT_TAG | cut -d "-" -f1`
    - VERSION=`echo $CI_COMMIT_TAG | cut -d "-" -f2`
    - echo "Building $DIRECTORY:$VERSION"
    - cd docker/$DIRECTORY
    - docker build -t $CI_REGISTRY_IMAGE/$DIRECTORY:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/$DIRECTORY:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_TAG =~ /^docker\/.*/

build laravel base image:
  extends: .build-base
  script:
    - cd docker/laravel
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/laravel:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/laravel:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/laravel/version.txt

build laravel php8.1 base image:
  extends: .build-base
  script:
    - cd docker/laravel/php-8.1
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/laravel/php-8.1:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/laravel/php-8.1:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/laravel/php-8.1/version.txt

build drupal 7 image:
  extends: .build-base
  script:
    - cd docker/drupal/7
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/drupal/7:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/drupal/7:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/drupal/7/*

build drupal 9 image:
  extends: .build-base
  script:
    - cd docker/drupal/9
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/drupal/9:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/drupal/9:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/drupal/9/*

build init mysql image:
  extends: .build-base
  script:
    - cd docker/init-mysql
    - docker build -t $CI_REGISTRY_IMAGE:init-mysql ./
    - docker push $CI_REGISTRY_IMAGE:init-mysql
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/init-mysql/*

build init laravel image:
  extends: .build-base
  script:
    - cd docker/init-laravel
    - docker build -t $CI_REGISTRY_IMAGE:init-laravel ./
    - docker push $CI_REGISTRY_IMAGE:init-laravel
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/init-laravel/*

build laravel echo image:
  extends: .build-base
  script:
    - cd docker/laravel-echo
    - docker build -t $CI_REGISTRY_IMAGE:laravel-echo ./
    - docker push $CI_REGISTRY_IMAGE:laravel-echo
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/laravel-echo/*

build review mysql image:
  extends: .build-base
  script:
    - cd docker/review-mysql
    - docker build -t $CI_REGISTRY_IMAGE:review-mysql ./
    - docker push $CI_REGISTRY_IMAGE:review-mysql
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/review-mysql/*

build dart base image:
  extends: .build-base
  script:
    - cd docker/dart
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/dart:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/dart:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/dart/version.txt

build koality alpine base image:
  extends: .build-base
  script:
    - cd docker/alpine
    - VERSION=`cat version.txt`
    - docker build -t $CI_REGISTRY_IMAGE/alpine:$VERSION ./
    - docker push $CI_REGISTRY_IMAGE/alpine:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        paths:
          - docker/alpine/version.txt

# @TODO: Clean this up into a utility script that gets fired on a tag and
# that script decides what it should build and upload to the Helm Repo. Hopefully
# Gitlab's Helm Registry will have some better out-of-box support soon.

# Start by using a pipeline that uses the `helm packages` command to package
# up the laravel-staging chart. Only trigger if the tag contains "laravel-staging"
build laravel chart:
  stage: build
  image: 
    name: alpine/helm:3.5.4
    entrypoint: [""]
  script:
    - cd charts
    - helm package laravel
  rules:
    # Check if tag contains "laravel-staging"
    - if: $CI_COMMIT_TAG =~ /^laravel-.*/
  artifacts:
    paths:
      - "**/*.tgz"
    expire_in: "1 week"

build mysql cluster chart:
  stage: build
  image: 
    name: alpine/helm:3.5.4
    entrypoint: [""]
  script:
    - cd charts
    - helm package mysql-cluster
  rules:
    - if: $CI_COMMIT_TAG =~ /^mysql-cluster-.*/
  artifacts:
    paths:
      - "**/*.tgz"
    expire_in: "1 week"

build drupal chart:
  stage: build
  image: 
    name: alpine/helm:3.5.4
    entrypoint: [""]
  script:
    - cd charts
    - helm package drupal
  rules:
    - if: $CI_COMMIT_TAG =~ /^drupal-.*/
  artifacts:
    paths:
      - "**/*.tgz"
    expire_in: "1 week"

build vue chart:
  stage: build
  image: 
    name: alpine/helm:3.5.4
    entrypoint: [""]
  script:
    - cd charts
    - helm package vue
  rules:
    - if: $CI_COMMIT_TAG =~ /^vue-.*/
  artifacts:
    paths:
      - "**/*.tgz"
    expire_in: "1 week"

build flutter web chart:
  stage: build
  image: 
    name: alpine/helm:3.5.4
    entrypoint: [""]
  script:
    - cd charts
    - helm package flutter-web
  rules:
    - if: $CI_COMMIT_TAG =~ /^flutter-web-.*/
  artifacts:
    paths:
      - "**/*.tgz"
    expire_in: "1 week"

# Ugly but works for now
upload charts:
  stage: upload
  image: curlimages/curl:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - build mysql cluster chart
    - build laravel chart
    - build drupal chart
    - build vue chart
    - build flutter web chart
  rules:
    - if: $CI_COMMIT_TAG =~ /^mysql-cluster-.*/
    - if: $CI_COMMIT_TAG =~ /^laravel-.*/
    - if: $CI_COMMIT_TAG =~ /^drupal-.*/
    - if: $CI_COMMIT_TAG =~ /^vue-.*/
    - if: $CI_COMMIT_TAG =~ /^flutter-web-.*/
  script:
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@charts/$CI_COMMIT_TAG.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"'